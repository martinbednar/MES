// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241128150702_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.AutoScrewingProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Angle")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DateTimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("Torque")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("AutoScrewingProcessData");
                });

            modelBuilder.Entity("DAL.Models.ConductivityProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Max")
                        .HasColumnType("real");

                    b.Property<float?>("Min")
                        .HasColumnType("real");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ConductivityProcessData");
                });

            modelBuilder.Entity("DAL.Models.FitAndFunctionMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FitAndFunctionId")
                        .HasColumnType("int");

                    b.Property<float?>("Max")
                        .HasColumnType("real");

                    b.Property<float?>("Min")
                        .HasColumnType("real");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FitAndFunctionId");

                    b.ToTable("FitAndFunctionMeasurements");
                });

            modelBuilder.Entity("DAL.Models.FitAndFunctionProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("LeftNOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("LeftOK")
                        .HasColumnType("bit");

                    b.Property<int?>("LeftStatus")
                        .HasColumnType("int");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int?>("OverallStatus")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<bool?>("RightNOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("RightOK")
                        .HasColumnType("bit");

                    b.Property<int?>("RightStatus")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("FitAndFunctionProcessData");
                });

            modelBuilder.Entity("DAL.Models.ManualScrewingProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Angle")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DateTimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("Torque")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ManualScrewingProcessData");
                });

            modelBuilder.Entity("DAL.Models.NgAutoScrewingProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("NgAutoScrewingProcessData");
                });

            modelBuilder.Entity("DAL.Models.PartAllProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartAllProcessData");
                });

            modelBuilder.Entity("DAL.Models.PressingProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Force")
                        .HasColumnType("real");

                    b.Property<int?>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("NOK")
                        .HasColumnType("bit");

                    b.Property<bool?>("OK")
                        .HasColumnType("bit");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<float?>("Position")
                        .HasColumnType("real");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("PressingProcessData");
                });

            modelBuilder.Entity("DAL.Models.PressingReworkProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("In1")
                        .HasColumnType("bit");

                    b.Property<bool?>("In2")
                        .HasColumnType("bit");

                    b.Property<bool?>("In3")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<bool?>("Rework1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rework2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rework3")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("PressingReworkProcessData");
                });

            modelBuilder.Entity("DAL.Models.ScanProcessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FFF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("PartIdent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumberProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YY")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("ScanProcessData");
                });

            modelBuilder.Entity("DAL.Models.AutoScrewingProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("AutoScrewingProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.ConductivityProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("ConductivityProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.FitAndFunctionMeasurement", b =>
                {
                    b.HasOne("DAL.Models.FitAndFunctionProcessData", "FitAndFunction")
                        .WithMany("Measurements")
                        .HasForeignKey("FitAndFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitAndFunction");
                });

            modelBuilder.Entity("DAL.Models.FitAndFunctionProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("FitAndFunctionProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.ManualScrewingProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("ManualScrewingProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.NgAutoScrewingProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("NgAutoScrewingProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.PressingProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("PressingProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.PressingReworkProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("PressingReworkProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.ScanProcessData", b =>
                {
                    b.HasOne("DAL.Models.PartAllProcessData", "Part")
                        .WithMany("ScanProcessData")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DAL.Models.FitAndFunctionProcessData", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("DAL.Models.PartAllProcessData", b =>
                {
                    b.Navigation("AutoScrewingProcessData");

                    b.Navigation("ConductivityProcessData");

                    b.Navigation("FitAndFunctionProcessData");

                    b.Navigation("ManualScrewingProcessData");

                    b.Navigation("NgAutoScrewingProcessData");

                    b.Navigation("PressingProcessData");

                    b.Navigation("PressingReworkProcessData");

                    b.Navigation("ScanProcessData");
                });
#pragma warning restore 612, 618
        }
    }
}
